@model SpmsApp.ViewModels.VC.IndividualStudentPLOScoreComparisonProgramViewModel;
@{
    ViewData["Title"] = "Individual Student PLO Score Comparison (Program)";
}

<div class="row">
    <div class="col">@Html.Partial("TopBar", Model.TopbarViewModel)</div>
</div>
<div class="row" style="height: 100%;">
    <div class="col-2">
        @Html.Partial("VCSidebar")
    </div>
    <div class="col">
        <form id="student-course-selector">
            <label>
                Student ID:
            </label>
            <input type="number" id="stID" required> <br>
            <label>
                Select a Program:
            </label>
            <select id="pID" required>
                <option value="">Select a Program</option>
                @foreach (var program in Model.Programs)
                {
                    <option value=@program.ProgramID>@($"{program.ProgramName}")</option>
                }
            </select>
            <input type="submit" value="Submit">
        </form>
        <div style="width: 50%;" id="draw-point">

        </div>
    </div>
</div>

<script>
    document.getElementById("student-course-selector").addEventListener('submit', e => {
        e.preventDefault();

        let stID = document.getElementById("stID").value;
        let pID = document.getElementById("pID").value;

        console.log(stID);
        console.log(pID);
        console.log('program view');

        fetch(`/vc/ispscp/${stID}/${pID}`)
            .then(res => res.json())
            .then(res => {
                console.log(res);
                let drawPoint = document.getElementById('draw-point');
                drawPoint.innerHTML = "";

                var ctx = document.createElement('canvas');
                ctx.getContext('2d');
                drawPoint.appendChild(ctx);

                var myChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: res.ploList,
                        datasets: [{
                            label: 'Student Score',
                            data: res.studentScores,
                            backgroundColor: [
                                'rgba(255, 99, 132, 1)'
                            ],
                            borderColor: [
                                'rgba(255, 99, 132, 1)'
                            ],
                            borderWidth: 1
                        }, {
                            label: 'Program Average',
                            data: res.programScores,
                            backgroundColor: [
                                'rgba(54, 162, 235, 1)'
                            ],
                            borderColor: [
                                'rgba(54, 162, 235, 1)'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true,
                                grid: {
                                    offset: true
                                }
                            },
                            x: {
                                grid: {
                                    offset: true
                                }
                            }
                        }
                    }
                })
            })
            .catch(error => alert('Please Select Correct Student ID and/or Course'));
    })
</script>